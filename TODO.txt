
2016/06/17 =========================================================
1. Implement notification from services where necessary: this involves calling into the notification service
   with the relevant parameters to generate notifications.

2. Convert all 'new Entity(...)' calls from with the services to 'DataContext.Store<Entity>().NewEntity()' calls. [Done]

3. Flesh out the Profile-Discovery feature. The object returned in the sequence from the "Discover" method needs to be
   defined, as i believe it needs to be an object that encapsulates the user-data authorized for viewing, for each user.

4. Review the "FeatureAccess.AllowAccessTo(...)" method to take into consideration the "Permission" property added to 
   FeatureDescriptors. [Done]

5. Flesh out the feature uri's for all the Service methods. These will be used to seed the database, so include this in the
   "fleshing out". [Done]

6. Define default AccessProfiles for "System-Admin", "Policy-Admin", "Service-Provider", "Farmer", "Guest" and seed the database with them.
   Upon registering a new User, the default Profiles MUST be applied to them. So this needs to be added too. [Done]

7. Enforce that any access to the system without logging in will be done as a "Guest" user. This will be done via the UserContextService: if
   no user is logged in, it will fetch and return the guest user. This can be implemented from within the UserContext class. Simply return
   the Load and cache the guest user upon creation, then return it when no other user is logged into the system.

8. Creating SystemAdmin and PolicyAdmin accounts will require an extra process...maybe an invite sent from the "root" admin to the email of a user
   with a link to enter the necessary details and supply back to a special method on the service authrized to create admin accounts.


2016/08/13 ====================================================================================

1. Flesh out and add the eCommerce aspect of the system.

2. Verify that logging in form WebApi will also log in the user into MVC, so that all our "cshtml" pages can be guarded by the [authorize] attribute.
   This will ensure that only the login page can be peeked at. Refer to [2016/06/17]#7 as it explains that all access into the system will have a user
   account - unauthorized users will be "borrowed" the guest account access, and will be limited to only unrestricted places. [DONE] 


2016/08/16 ====================================================================================

1. I should consider building a html cache for html view files that the ViewServerController serves


2016/09/04 ====================================================================================

1.   The default Client Account is ment for non service-providers, i.e, people who will only have access to the marketplace to purchase goods and services.
	 This means that i will have to flesh-out the market place service, and identify resources to grant the client-account. [DONE]

2.   Added new access descriptors for enabling a client (default/Farmer/Service-Provider) to manage Business, Farm, and Service accounts [DONE]

3.   Add access descriptors for the market place [DONE]


2016/10/20 ====================================================================================

1.	 Modify the "copyTo" Typescript extension function to include the option of specifying the properties to be copied. [DONE]


2016/11/14 ====================================================================================

1.	 Add permissions/access descriptors for the marketplace manager/service [DONE]


2016/11/22 ====================================================================================

1.	 change all Webapi endpoint definitions to adhere to the following pattern:
	 - No parameters will be appended to the url
	 - all parameters will be passed along using objects gotten from the body of the request
	 [DONE]


2016/12/19 ====================================================================================

1.    Modify all Api-endpoints that utilize the GET verb and also have "[FromBody]" parameter-attributes. HTTP spec does not specify
	  behaviour for passing a body along with a GET request, and as such, all the network layers may respoond to such an even as they
	  see fit: which includes stripping off the body of the request. Be that as it may, all such requests should rely on "query strings"
	  to pass along parameters to the Api-Endpoint. [DONE]


2017/02/10 ====================================================================================

1.    It appears Service/Product Tags are not showing up in the Service/Product editor for already existing items.
